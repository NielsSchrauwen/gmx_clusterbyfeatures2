language: python
sudo: false

python:
- 3.6

os:
- linux
- osx

matrix:
  exclude:
  - os: osx
    python: 3.6
  include:
  - sudo: required
    python: 3.6
    services:
    - docker
    env: DOCKER_IMAGE=quay.io/pypa/manylinux1_x86_64
  - os: osx
    python: 3.6
    osx_image: xcode10.2
    language: generic
    env: MACOS=mojave
  - os: osx
    python: 3.6
    osx_image: xcode10
    language: generic
    env: MACOS=high_sierra
  - os: osx
    python: 3.6
    osx_image: xcode9.2
    language: generic
    env: MACOS=sierra
  allow_failures:
  - os: osx

env:
  global:
    # $PYPIPASSWORD
    secure: qo57dxY6zF76pgz34Qq5a4W0o/ra9hMCAg6xivX7XOehE6vyN/tQkm5V9ZknvXEnwHZDDPu3568Tmdm4D59FtNsOedZHNrtroCKnOZnRZfsWhQYDzK7/7QnlqWBbPRdw9AgdipND3RK85gySsne7SUlDRrF2DRvKefxgeXPysR8URRHDbcCPxFDkdKbpXOEbn2ur8hC1ipKwqxEWkK5fQEmayYkNQOFmnjyRukGoH5JT48QOMJUsDWLfrDq6kpyAI3nk4RNw32tgavOQ28UCefj8gf/JXbsqVq8hW/L4LQLN7eai97hqz3Ew4MsqleDDroY88axTkMJG/dBg55YASs7ZwJYaIMBrryAAmXj+uB4TzDN/uKdZpkPek6WzuLKmcOb7K1WCYuqTPXbEdsJSkKtxz9xFGF9P1/jKFcQK0t+RalvL+i11hGsrkDfNu4xehmdKHzKiyUcH7wxOWc3iG4kbmmYUMY0Ynf+zSCE/GJ2ABRp24k1dfwJnd1WflqhGyIcd3jrzGX7zEI4TWPA/37XYx9S6fG7MdX2vbJliRGxzWWUKXECcSRqZH8bx3gdUeM00zbBS9v7xfYVcu9c3VxhxOz3U5XKzbozeffysOhpRuxMAze6M+fH6pF/Yq335qB699Qm4JctP30itXTH463fpc4L1/kQ+YoRJ16VFjSs=

before_install:
- |
  pymodules="wheel pkgconfig pybind11 pyopenssl six cryptography twine"
  if [[ $TRAVIS_OS_NAME != 'osx' ]]; then
    sudo apt-get update -qq
    sudo apt-get install libeigen3-dev
    sudo apt-get install libfftw3* libopenblas* liblapack3 liblapack-dev 
    sudo apt-get install libatlas3-base libatlas-base-dev
    sudo apt-get install curl wget
    python -m pip install --upgrade pip
    python -m pip install --upgrade $pymodules
    python -m pip install auditwheel
  else
    brew update
    if [[ $MACOS == 'mojave' ]]; then
      brew install zlib
      brew install gcc@8
      xcode-select --install
    else
      brew cask uninstall oclint
      brew install gcc@8 --with-system-zlib
    fi
    brew install gsl
    brew install fftw
    brew outdated pyenv || brew upgrade pyenv
    brew upgrade cmake
    brew install eigen
    brew cleanup
    eval "$(pyenv init -)"

    PYVERS=("3.4" "3.5" "3.6" "3.7")
    PYTHONS=()
    for PYVER in ${PYVERS[@]}
    do
      # Install the latest release of the specified Python version using pyenv.
      PYVER="$(pyenv install --list | grep -E "^\\s*$PYVER" | sort -n -t. -k3 | tail -n1)"
      pyenv install $PYVER
      pyenv global $PYVER
      PYTHONS+=($PYVER)
      echo $(python --version)
      python -m pip install --upgrade pip
      python -m pip install --upgrade $pymodules
      python -m pip install delocate
    done
  fi
  
install:
- |
  if [[ -z ${DOCKER_IMAGE} ]]; then
    if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
      export CC=gcc-8
      export CXX=g++-8
    fi
    bash build_in_travis.sh $TRAVIS_OS_NAME
    export GMX_PATH=/usr/local/gromacs
  fi
- |
  if [[ -n "$DOCKER_IMAGE" ]]; then
    docker pull $DOCKER_IMAGE
  fi

before_script:
- |
  if [[ -z ${DOCKER_IMAGE} ]]; then
     if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
       for PYTHON in ${PYTHONS[@]}
       do
         pyenv global $PYTHON
         echo $(python --version)
         python setup.py build
         # install_name_tool -change @rpath/libgromacs.2.dylib /usr/local/gromacs/lib/libgromacs.dylib gmx_clusterByFeatures/*.so
         install_name_tool -change @rpath/libgromacs.2.dylib /usr/local/gromacs/lib/libgromacs.dylib build/lib.*/gmx_clusterByFeatures/*.so
         python -m pip wheel -w wheels/ --no-deps --no-cache-dir .
         python setup.py install
         rm -rf build
       done
     else
       python -m pip install -ve .
     fi
  fi
  
script:
- |
  if [[ -z ${DOCKER_IMAGE} ]]; then
    if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
      export SRC_DIR=`pwd`
      cd $HOME
      for PYTHON in ${PYTHONS[@]}
      do
        pyenv global $PYTHON
        echo $(python --version)
        python -c "import gmx_clusterByFeatures; print('=====\nTEST -- gmx_clusterByFeatures GROMACS version: ', gmx_clusterByFeatures.gmx_version, '\n=====')"
      done
      cd $SRC_DIR
    else
      python -c "import gmx_clusterByFeatures; print('=====\nTEST -- gmx_clusterByFeatures GROMACS version: ', gmx_clusterByFeatures.gmx_version, '\n=====')"
    fi
  else
     docker run --rm -v `pwd`:/io ${DOCKER_IMAGE} /io/build_in_docker.sh
  fi
- |
  if [[ -n ${DOCKER_IMAGE} ]]; then
      ls wheelhouse/*
  fi
 
# after_success:
- |
    echo "[distutils]"                                  > ~/.pypirc
    echo "index-servers ="                             >> ~/.pypirc
    echo "    pypi"                                    >> ~/.pypirc
    echo "[pypi]"                                      >> ~/.pypirc
    echo "    username: rjdkmr"                        >> ~/.pypirc
    echo "    password: $PYPIPASSWORD"                 >> ~/.pypirc
    
- |
  export TWINE_USERNAME=rjdkmr
  export TWINE_PASSWORD=$PYPIPASSWORD
  if [[ $TRAVIS_OS_NAME != 'osx' ]]; then
    if [[ -n ${DOCKER_IMAGE} ]]; then
      twine upload --skip-existing  wheelhouse/*manylinux1_x86_64.whl
    fi
  else
    delocate-listdeps wheels/*.whl
    delocate-wheel -w fixed_wheels -v wheels/*.whl
    delocate-listdeps fixed_wheels/*.whl
    twine upload --skip-existing  fixed_wheels/*.whl
  fi

